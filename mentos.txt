<template>
  <section>
    <div class="md:w-1/2 md:mx-auto">
      <Table class="min-w-full divide-y divide-gray-300">
        <TableCaption>A list of your recent invoices.</TableCaption>
        <TableHeader>
          <TableRow :key="headerGroup.id" v-for="headerGroup in table.getHeaderGroups()">
            <TableHead scope="col" :key="header.id" v-for="header in headerGroup.headers">
              <FlexRender :render="header.column.columnDef.header" :props="header.getContext()" />
            </TableHead>
          </TableRow>
        </TableHeader>
        <TableBody class="divide-y divide-gray-200">
          <TableRow :key="row.id" v-for="row in table.getRowModel().rows">
            <TableCell :key="cell.id" v-for="cell in row.getVisibleCells()">
              <FlexRender :render="cell.column.columnDef.cell" :props="cell.getContext()" />
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </div>
  </section>
</template>

<script setup lang="ts">
import useFetchTransactions from '@/primary/infrastructure/composables/useFetchTransactions'
import useUserStore from '@/primary/infrastructure/store/user'
import { useVueTable, FlexRender, getCoreRowModel } from '@tanstack/vue-table'
import { onMounted, computed, ref } from 'vue'
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from '@/primary/components/ui/table'

const { transactions, fetchTransactions } = useFetchTransactions()
const store = useUserStore()
const filterTransactionByUser = computed(() => {
  return transactions.value.filter(
    (transaction: any) => transaction.customer_details?.email === store.emailValue
  )
})

onMounted(() => {
  fetchTransactions()
  store.getUser()
})

const row = ref([])
const rowPurchases = async () => {
  await fetchTransactions()
  if (filterTransactionByUser.value.length > 0) {
    const response = filterTransactionByUser.value.map((transaction: any) => {
      return {
        id: transaction.id,
        status: transaction.status,
        email: transaction.customer_details?.email,
        amount: (transaction.amount_total / 100).toFixed(2)
      }
    })
    row.value = response
    console.log(row.value)
  }
}

onMounted(() => {
  fetchTransactions()
  rowPurchases()
})

const columnPurchases = [
  {
    accessorKey: 'id',
    header: 'ID'
  },
  {
    accessorKey: 'status',
    header: 'Status'
  },
  {
    accessorKey: 'email',
    header: 'Email'
  },
  {
    accessorKey: 'amount',
    header: 'Valor da compra'
  }
]

const table = useVueTable({
  data: row.value,
  columns: columnPurchases,
  getCoreRowModel: getCoreRowModel()
})
</script>
